/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Bill extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5962072006989531998L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bill\",\"namespace\":\"model.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"creationTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"firstname\",\"type\":\"string\"},{\"name\":\"lastname\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"}]}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Item\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"float\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bill> ENCODER =
      new BinaryMessageEncoder<Bill>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bill> DECODER =
      new BinaryMessageDecoder<Bill>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Bill> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Bill> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bill>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Bill to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Bill from a ByteBuffer. */
  public static Bill fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence title;
  @Deprecated public long creationTime;
  @Deprecated public model.avro.User user;
  @Deprecated public java.util.List<model.avro.Item> items;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bill() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param title The new value for title
   * @param creationTime The new value for creationTime
   * @param user The new value for user
   * @param items The new value for items
   */
  public Bill(java.lang.Long id, java.lang.CharSequence title, java.lang.Long creationTime, model.avro.User user, java.util.List<model.avro.Item> items) {
    this.id = id;
    this.title = title;
    this.creationTime = creationTime;
    this.user = user;
    this.items = items;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return creationTime;
    case 3: return user;
    case 4: return items;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: creationTime = (java.lang.Long)value$; break;
    case 3: user = (model.avro.User)value$; break;
    case 4: items = (java.util.List<model.avro.Item>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'creationTime' field.
   * @return The value of the 'creationTime' field.
   */
  public java.lang.Long getCreationTime() {
    return creationTime;
  }

  /**
   * Sets the value of the 'creationTime' field.
   * @param value the value to set.
   */
  public void setCreationTime(java.lang.Long value) {
    this.creationTime = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public model.avro.User getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(model.avro.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<model.avro.Item> getItems() {
    return items;
  }

  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<model.avro.Item> value) {
    this.items = value;
  }

  /**
   * Creates a new Bill RecordBuilder.
   * @return A new Bill RecordBuilder
   */
  public static model.avro.Bill.Builder newBuilder() {
    return new model.avro.Bill.Builder();
  }

  /**
   * Creates a new Bill RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bill RecordBuilder
   */
  public static model.avro.Bill.Builder newBuilder(model.avro.Bill.Builder other) {
    return new model.avro.Bill.Builder(other);
  }

  /**
   * Creates a new Bill RecordBuilder by copying an existing Bill instance.
   * @param other The existing instance to copy.
   * @return A new Bill RecordBuilder
   */
  public static model.avro.Bill.Builder newBuilder(model.avro.Bill other) {
    return new model.avro.Bill.Builder(other);
  }

  /**
   * RecordBuilder for Bill instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bill>
    implements org.apache.avro.data.RecordBuilder<Bill> {

    private long id;
    private java.lang.CharSequence title;
    private long creationTime;
    private model.avro.User user;
    private model.avro.User.Builder userBuilder;
    private java.util.List<model.avro.Item> items;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(model.avro.Bill.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = true;
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = model.avro.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Bill instance
     * @param other The existing instance to copy.
     */
    private Builder(model.avro.Bill other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public model.avro.Bill.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public model.avro.Bill.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public model.avro.Bill.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public model.avro.Bill.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTime' field.
      * @return The value.
      */
    public java.lang.Long getCreationTime() {
      return creationTime;
    }

    /**
      * Sets the value of the 'creationTime' field.
      * @param value The value of 'creationTime'.
      * @return This builder.
      */
    public model.avro.Bill.Builder setCreationTime(long value) {
      validate(fields()[2], value);
      this.creationTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTime' field has been set.
      * @return True if the 'creationTime' field has been set, false otherwise.
      */
    public boolean hasCreationTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'creationTime' field.
      * @return This builder.
      */
    public model.avro.Bill.Builder clearCreationTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public model.avro.User getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public model.avro.Bill.Builder setUser(model.avro.User value) {
      validate(fields()[3], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public model.avro.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(model.avro.User.newBuilder(user));
        } else {
          setUserBuilder(model.avro.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public model.avro.Bill.Builder setUserBuilder(model.avro.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public model.avro.Bill.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<model.avro.Item> getItems() {
      return items;
    }

    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public model.avro.Bill.Builder setItems(java.util.List<model.avro.Item> value) {
      validate(fields()[4], value);
      this.items = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public model.avro.Bill.Builder clearItems() {
      items = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bill build() {
      try {
        Bill record = new Bill();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.creationTime = fieldSetFlags()[2] ? this.creationTime : (java.lang.Long) defaultValue(fields()[2]);
        if (userBuilder != null) {
          record.user = this.userBuilder.build();
        } else {
          record.user = fieldSetFlags()[3] ? this.user : (model.avro.User) defaultValue(fields()[3]);
        }
        record.items = fieldSetFlags()[4] ? this.items : (java.util.List<model.avro.Item>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bill>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bill>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bill>
    READER$ = (org.apache.avro.io.DatumReader<Bill>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
